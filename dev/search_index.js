var documenterSearchIndex = {"docs":
[{"location":"api_datadigraph/#AbstractDataGraph","page":"DataDiGraph","title":"AbstractDataGraph","text":"","category":"section"},{"location":"api_datadigraph/#Type","page":"DataDiGraph","title":"Type","text":"","category":"section"},{"location":"api_datadigraph/","page":"DataDiGraph","title":"DataDiGraph","text":"Modules = [MetaDataGraphs]\nOrder = [:type]\nPages = [\"datadigraph/datadigraph.jl\"]","category":"page"},{"location":"api_datadigraph/#MetaDataGraphs.DataDiGraph","page":"DataDiGraph","title":"MetaDataGraphs.DataDiGraph","text":"DataDiGraph{T,VL,VD,ED,GD} <: AbstractDataGraph{T}\n\nStructure for graphs with metadata based on adjacency list storage.\n\nFields\n\nne::Int: number of edges\nfadjlist::Vector{Vector{Int}}: forward adjacency lists\nbadjlist::Vector{Vector{Int}}: backward adjacency lists\nlabels::Vector{VL}: list of vertex labels\nvertices::Dict{VL,T}: dictionary mapping each vertex label to the associated integer index v\nvertex_data::Vector{VD}: list of vertex data objects, indexed by integers v\nedge_data::Vector{Vector{ED}}: list of edge data objects, indexed by s first and d_index second, where d_index is the rank of d among the outneighbors of s\ngraph_data::GD: single graph data object\n\n\n\n\n\n","category":"type"},{"location":"api_datadigraph/#MetaDataGraphs.DataDiGraph-Union{Tuple{}, Tuple{T}} where T","page":"DataDiGraph","title":"MetaDataGraphs.DataDiGraph","text":"DataDiGraph{T}(VL, VD, ED, graph_data)\n\nConstructor taking only label and data types to create an empty DataDiGraph.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#Basic-access","page":"DataDiGraph","title":"Basic access","text":"","category":"section"},{"location":"api_datadigraph/","page":"DataDiGraph","title":"DataDiGraph","text":"Modules = [MetaDataGraphs]\nOrder = [:function]\nPages = [\"datadigraph/datadigraph.jl\"]","category":"page"},{"location":"api_datadigraph/#Base.haskey-Union{Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL}, VL}} where {T, VL}","page":"DataDiGraph","title":"Base.haskey","text":"haskey(g, label)\n\nCheck whether a vertex with label label exists.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.get_label-Tuple{DataDiGraph, Integer}","page":"DataDiGraph","title":"MetaDataGraphs.get_label","text":"get_label(g, v)\n\nRetrieve the label associated with vertex v.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.get_vertex-Union{Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL}, VL}} where {T, VL}","page":"DataDiGraph","title":"MetaDataGraphs.get_vertex","text":"get_vertex(g, label)\n\nRetrieve the vertex associated with label `label.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#Graphs.jl-interface","page":"DataDiGraph","title":"Graphs.jl interface","text":"","category":"section"},{"location":"api_datadigraph/","page":"DataDiGraph","title":"DataDiGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"datadigraph/graphs_interface.jl\"]","category":"page"},{"location":"api_datadigraph/#Graphs.SimpleGraphs.add_edge!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL, VD, ED}, Integer, Integer, ED}} where {T, VL, VD, ED}","page":"DataDiGraph","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g::DataDiGraph, s, d, data)\n\nAdd an edge to g by specifying the vertices s and d along with the associated data.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#Graphs.SimpleGraphs.add_vertex!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL, VD, ED}, VL, VD}} where {T, VL, VD, ED}","page":"DataDiGraph","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(g::DataDiGraph, label, data)\n\nAdd a vertex to g by specifying its label along with the associated data.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#Metadata-handling","page":"DataDiGraph","title":"Metadata handling","text":"","category":"section"},{"location":"api_datadigraph/","page":"DataDiGraph","title":"DataDiGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"datadigraph/data.jl\"]","category":"page"},{"location":"api_datadigraph/#MetaDataGraphs.get_data-Tuple{DataDiGraph, Integer, Integer}","page":"DataDiGraph","title":"MetaDataGraphs.get_data","text":"get_data(g, s, d)\n\nRetrieve edge-level metadata for edge (s, d).\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.get_data-Tuple{DataDiGraph, Integer}","page":"DataDiGraph","title":"MetaDataGraphs.get_data","text":"get_data(g, v)\n\nRetrieve vertex-level metadata for vertex v.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.get_data-Tuple{DataDiGraph}","page":"DataDiGraph","title":"MetaDataGraphs.get_data","text":"get_data(g)\n\nRetrieve graph-level metadata.\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.set_data!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL, VD, ED}, Integer, Integer, ED}} where {T, VL, VD, ED}","page":"DataDiGraph","title":"MetaDataGraphs.set_data!","text":"set_data!(g, s, d, data)\n\nSet edge-level metadata to value data for edge (s, d).\n\n\n\n\n\n","category":"method"},{"location":"api_datadigraph/#MetaDataGraphs.set_data!-Union{Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{DataDiGraph{T, VL, VD}, Integer, VD}} where {T, VL, VD}","page":"DataDiGraph","title":"MetaDataGraphs.set_data!","text":"set_data!(g, v, data)\n\nSet vertex-level metadata to value data for vertex v.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#AbstractDataGraph","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"","category":"section"},{"location":"api_abstract/#Type","page":"AbstractDataGraph","title":"Type","text":"","category":"section"},{"location":"api_abstract/","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"abstract/abstractdatagraph.jl\"]","category":"page"},{"location":"api_abstract/#MetaDataGraphs.AbstractDataGraph","page":"AbstractDataGraph","title":"MetaDataGraphs.AbstractDataGraph","text":"AbstractDataGraph{T,VL,VD,ED,GD} <: AbstractGraph{T}\n\nGeneral template for graphs with metadata.\n\nT<:Integer is the type of vertices\nVL is the type of vertex labels (cannot be a subtype of Integer)\nVD is the type of vertex data objects\nED is the type of edge data objects\nGD is the type of the graph data object\n\n\n\n\n\n","category":"type"},{"location":"api_abstract/#Graphs.jl-interface","page":"AbstractDataGraph","title":"Graphs.jl interface","text":"","category":"section"},{"location":"api_abstract/","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"abstract/graphs_interface.jl\"]","category":"page"},{"location":"api_abstract/#Graphs.SimpleGraphs.add_edge!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD, ED}, Integer, Integer}} where {T, VL, VD, ED<:Nothing}","page":"AbstractDataGraph","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g, s, d)\n\nShortcut for add_edge!(g, s, d, nothing), to use in graphs where edges have no metadata.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Graphs.SimpleGraphs.add_edge!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD, ED}, VL, VL, ED}} where {T, VL, VD, ED}","page":"AbstractDataGraph","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g::DataDiGraph, label_s, label_d, data)\n\nAdd an edge to g by specifying the labels label_s and label_d of both vertices, along with the associated data.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Graphs.SimpleGraphs.add_edge!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD, ED}, VL, VL}} where {T, VL, VD, ED<:Nothing}","page":"AbstractDataGraph","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g, label_s, label_d)\n\nShortcut for add_edge!(g, label_s, label_d, nothing), to use in graphs where edges have no metadata.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Graphs.SimpleGraphs.add_vertex!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD, ED}, VL}} where {T, VL, VD<:Nothing, ED}","page":"AbstractDataGraph","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(g, label)\n\nShortcut for add_vertex(g, label, nothing), to use in graphs where vertices have no metadata.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Graphs.has_edge-Union{Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL}, VL, VL}} where {T, VL}","page":"AbstractDataGraph","title":"Graphs.has_edge","text":"has_edge(g, label_s, label_d)\n\nCheck whether an edge exists between the vertices with labels label_s and label_d.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Graphs.has_vertex-Union{Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL}, VL}} where {T, VL}","page":"AbstractDataGraph","title":"Graphs.has_vertex","text":"has_vertex(g, label)\n\nCheck whether a vertex with label label exists by calling haskey(g, label).\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Metadata-handling","page":"AbstractDataGraph","title":"Metadata handling","text":"","category":"section"},{"location":"api_abstract/","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"abstract/data.jl\"]","category":"page"},{"location":"api_abstract/#MetaDataGraphs.get_data-Union{Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL}, VL, VL}} where {T, VL}","page":"AbstractDataGraph","title":"MetaDataGraphs.get_data","text":"get_data(g, label_s, label_d)\n\nRetrieve edge-level metadata for the edge between the vertices with labels label_s and label_d.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#MetaDataGraphs.get_data-Union{Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL}, VL}} where {T, VL}","page":"AbstractDataGraph","title":"MetaDataGraphs.get_data","text":"get_data(g, label)\n\nRetrieve vertex-level metadata for the vertex with label label.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#MetaDataGraphs.set_data!-Union{Tuple{ED}, Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD, ED}, VL, VD, ED}} where {T, VL, VD, ED}","page":"AbstractDataGraph","title":"MetaDataGraphs.set_data!","text":"sett_data!(g, label_s, label_d, data)\n\nSet edge-level metadata to value data for the edge between the vertices with labels label_s and label_d.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#MetaDataGraphs.set_data!-Union{Tuple{VD}, Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL, VD}, VL, VD}} where {T, VL, VD}","page":"AbstractDataGraph","title":"MetaDataGraphs.set_data!","text":"set_data!(g, label, data)\n\nSet vertex-level metadata to value data for the vertex with label label.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Edge-weights","page":"AbstractDataGraph","title":"Edge weights","text":"","category":"section"},{"location":"api_abstract/","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"abstract/weights.jl\"]","category":"page"},{"location":"api_abstract/#Graphs.weights-Union{Tuple{AbstractDataGraph{T}}, Tuple{T}} where T","page":"AbstractDataGraph","title":"Graphs.weights","text":"weights(g)\n\nCompute the edge weights for an AbstractDataGraph.\n\nIf the edge data is of type ED = Nothing, return a lazy matrix full of ones.\nIf the edge data is of type ED <: Real, fill a sparse matrix with it.\nIf the edge data is of another type ED, try to use the attribute edge_data.weight for each edge.\n\n\n\n\n\n","category":"method"},{"location":"api_abstract/#Dict-behavior","page":"AbstractDataGraph","title":"Dict behavior","text":"","category":"section"},{"location":"api_abstract/","page":"AbstractDataGraph","title":"AbstractDataGraph","text":"Modules = [MetaDataGraphs]\nPages = [\"abstract/dict.jl\"]","category":"page"},{"location":"api_abstract/#Base.getindex-Union{Tuple{VL}, Tuple{T}, Tuple{AbstractDataGraph{T, VL}, VL}} where {T, VL}","page":"AbstractDataGraph","title":"Base.getindex","text":"getindex(g, label)\n\nAlias for get_vertex(g, label), intended for dictionary-like use.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaDataGraphs","category":"page"},{"location":"#MetaDataGraphs.jl","page":"Home","title":"MetaDataGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of MetaDataGraphs.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This packages provides a Graphs.jl-compatible format for graphs whose vertices or edges have associated metadata. In addition, vertices are allowed to have a \"label\" of arbitrary non-integer type, instead of the integer labels imposed by Graphs.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Our main inspiration is MetaGraphsNext.jl, but we made slightly different design choices.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package, open the Julia REPL, type ] to switch to the Pkg REPL, and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/MetaDataGraphs.jl","category":"page"}]
}
